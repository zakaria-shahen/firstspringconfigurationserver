server.port=8081
eureka.client.service-url.defaultZone=http://eureka-server:8070/eureka/
eureka.instance.prefer-ip-address=true

management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.health.diskspace.enabled=false
management.health.ping.enabled=false
management.endpoints.enabled-by-default=true

# resilience4j health
management.health.circuitbreakers.enabled=true
management.health.ratelimiters.enabled=true
resilience4j.circuitbreaker.configs.default.register-health-indicator=true

# resilience4j Config for firstMicroservice
resilience4j.bulkhead.instances.firstMicroservice.max-concurrent-calls=5
resilience4j.bulkhead.instances.firstMicroservice.max-wait-duration=1


# define auto-invoke function (producer)
# The framework provides a default polling mechanism that will trigger the invocation of the supplier @Bean
# and by default it will do so every second
# ref: https://docs.spring.io/spring-cloud-stream/docs/current/reference/html/spring-cloud-stream.html#_suppliers_sources
# ref: https://docs.spring.io/spring-cloud-stream/docs/current/reference/html/spring-cloud-stream.html#_overview
spring.cloud.function.definition=createLicenseEventListener

spring.cloud.stream.bindings.createLicenseEventListener-in-0.destination=licensechange
spring.cloud.stream.bindings.createLicenseEventListener-in-0.group=secondmicroservice
spring.cloud.stream.bindings.createLicenseEventListener-in-0.consumer.concurrency=10
spring.cloud.stream.bindings.createLicenseEventListener-in-0.consumer.max-attempts=1

spring.cloud.stream.kafka.binder.brokers=kafkaserver:9092
spring.cloud.stream.kafka.binder.auto-create-topics=true

# Redis Props
spring.redis.url=redis://redisserver:6379
spring.redis.database=1
spring.cache.type=redis
#spring.cache.cache-names=licenses
#spring.cache.redis.time-to-live=60000

logging.level.org.springframework.cache=debug
logging.level.com.mycompany=debug


spring.zipkin.base-url=http://zipkin:9411
spring.zipkin.discovery-client-enabled=false
spring.sleuth.sampler.probability=1


# Oauth2 Resource - JWT
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8085/auth/realms/microservice_users
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8085/auth/realms/microservice_users/protocol/openid-connect/certs

# Oauth2 Resource - opaquetoken
#spring.security.oauth2.resourceserver.opaquetoken.introspection-uri=http://keycloak:8085/auth/realms/microservice_users/protocol/openid-connect/token/introspect
#spring.security.oauth2.resourceserver.opaquetoken.client-id=my_microservice
#spring.security.oauth2.resourceserver.opaquetoken.client-secret=WtnUhQasnfQ5F9U6mzdgXu5NjR4kuO48

# Oauth2 Client
#spring.security.oauth2.client.registration.keycloak.client-id=my_microservice
#spring.security.oauth2.client.registration.keycloak.client-secret=WtnUhQasnfQ5F9U6mzdgXu5NjR4kuO48
#spring.security.oauth2.client.registration.keycloak.scope=openid
#spring.security.oauth2.client.provider.keycloak.issuer-uri=http://keycloak:8085/auth/realms/microservice_users
#spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
